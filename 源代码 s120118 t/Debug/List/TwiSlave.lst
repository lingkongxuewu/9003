###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        30/May/2018  14:28:53 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\罗盘\源代码 s120118 t\src\TwiSlave.c                  #
#    Command line =  "G:\罗盘\源代码 s120118 t\src\TwiSlave.c" --cpu=m88 -ms  #
#                    -o "G:\罗盘\源代码 s120118 t\Debug\Obj\" -lCN            #
#                    "G:\罗盘\源代码 s120118 t\Debug\List\"                   #
#                    --initializers_in_flash --no_inline --no_cross_call      #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -Om                             #
#    List file    =  G:\罗盘\源代码 s120118 t\Debug\List\TwiSlave.lst         #
#    Object file  =  G:\罗盘\源代码 s120118 t\Debug\Obj\TwiSlave.r90          #
#                                                                             #
#                                                                             #
###############################################################################

G:\罗盘\源代码 s120118 t\src\TwiSlave.c
      1          
      2          /*******************************Copyright (c)***************************/
      3          /*
      4           *                         深圳铭之光电子技术有限公司
      5           *                         工　　　　　程　　　　　部
      6           *                         http://www.sinocomopto.com
      7           */
      8          /***********************************************************************/
      9          #define   __TWI_SLAVE_C__
     10          #include  "_Include.h"

   \                                 In  segment ABSOLUTE, at 0xbc
   \   union <unnamed> volatile __io _A_TWCR
   \                     _A_TWCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xbb
   \   union <unnamed> volatile __io _A_TWDR
   \                     _A_TWDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xba
   \   union <unnamed> volatile __io _A_TWAR
   \                     _A_TWAR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb9
   \   union <unnamed> volatile __io _A_TWSR
   \                     _A_TWSR:
   \   00000000                      DS8 1
     11          /***********************************************************************/
     12          #define TWI_BUF_SIZE 5
     13          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     14          int8u TwiRxTag;
   \                     TwiRxTag:
   \   00000000                      DS8 1
     15          int8u TwiRxBuf[TWI_BUF_SIZE];		// Transceiver buffer. Set the size in the header file
   \                     TwiRxBuf:
   \   00000001                      DS8 5
     16          int8u TwiRxBufPtr;
   \                     TwiRxBufPtr:
   \   00000006                      DS8 1
     17          
     18          int8u TwiTxBuf[TWI_BUF_SIZE];		// Transceiver buffer. Set the size in the header file
   \                     TwiTxBuf:
   \   00000007                      DS8 5
     19          int8u TwiTxBufPtr;
   \                     TwiTxBufPtr:
   \   0000000C                      DS8 1
     20          
     21          #define TWI_ENABLE()  TWCR=(1<<TWEN)|(0<<TWWC)|(1<<TWIE)|(1<<TWINT)|(1<<TWEA)|(0<<TWSTA)|(0<<TWSTO)
     22          
     23          #define TWI_DISABLE() TWCR=(1<<TWEN)|(0<<TWWC)|(0<<TWIE)|(1<<TWINT)|(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)
     24          /****************************************************************************/
     25          /*
     26           *功能：
     27           *入口：
     28           *出口：
     29           *备注：
     30           *函数性质：
     31           */

   \                                 In  segment CODE, align 2, keep-with-next
     32          void Twi_SlaveInit (void)
   \                     Twi_SlaveInit:
     33          {
     34          	TWAR=0x20;
   \   00000000   E200               LDI     R16, 32
   \   00000002   9300....           STS     _A_TWAR, R16
     35          	TWDR=0xFF;
   \   00000006   EF0F               LDI     R16, 255
   \   00000008   9300....           STS     _A_TWDR, R16
     36          	TWI_ENABLE();
   \   0000000C   EC05               LDI     R16, 197
   \   0000000E   9300....           STS     _A_TWCR, R16
     37          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_TWAR
   \   00000014                      REQUIRE _A_TWDR
   \   00000014                      REQUIRE _A_TWCR
     38          
     39          /*
     40           *功能：
     41           *入口：
     42           *出口：
     43           *备注：
     44           *函数性质：
     45           */

   \                                 In  segment CODE, align 2, keep-with-next
     46          void Twi_TransceiverStaWithData (int8u* buf,int8u n)
   \                     Twi_TransceiverStaWithData:
     47          {	int8u i;
     48          	
     49          	TWI_DISABLE();
   \   00000000   E834               LDI     R19, 132
   \   00000002   9330....           STS     _A_TWCR, R19
     50          	if(n>TWI_BUF_SIZE)return;
   \   00000006   3026               CPI     R18, 6
   \   00000008   F488               BRCC    ??Twi_TransceiverStaWithData_0
     51          	for(i=0;i<n;i++)
   \   0000000A   E040               LDI     R20, 0
   \   0000000C   C00A               RJMP    ??Twi_TransceiverStaWithData_1
     52          	{	TwiTxBuf[i]=buf[i];
   \                     ??Twi_TransceiverStaWithData_2:
   \   0000000E   E050               LDI     R21, 0
   \   00000010   01F8               MOVW    R31:R30, R17:R16
   \   00000012   0FE4               ADD     R30, R20
   \   00000014   1FF5               ADC     R31, R21
   \   00000016   8130               LD      R19, Z
   \   00000018   01FA               MOVW    R31:R30, R21:R20
   \   0000001A   ....               SUBI    R30, LOW((-(TwiRxTag) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(TwiRxTag) & 0xFFFF) >> 8
   \   0000001E   8337               STD     Z+7, R19
     53          	}
   \   00000020   9543               INC     R20
   \                     ??Twi_TransceiverStaWithData_1:
   \   00000022   1742               CP      R20, R18
   \   00000024   F3A0               BRCS    ??Twi_TransceiverStaWithData_2
     54          	TWI_ENABLE();
   \   00000026   EC05               LDI     R16, 197
   \   00000028   9300....           STS     _A_TWCR, R16
     55          }
   \                     ??Twi_TransceiverStaWithData_0:
   \   0000002C   9508               RET
   \   0000002E                      REQUIRE _A_TWCR
     56          
     57          /*
     58           *功能：
     59           *入口：
     60           *出口：
     61           *备注：
     62           *函数性质：
     63           */

   \                                 In  segment CODE, align 2, keep-with-next
     64          int8u Twi_GetDataFromTransceiver (int8u* buf,int8u n)
   \                     Twi_GetDataFromTransceiver:
     65          {	int8u i;
     66          	
     67          	
     68          	if(3!=TwiRxTag)return 0;
   \   00000000   9130....           LDS     R19, TwiRxTag
   \   00000004   3033               CPI     R19, 3
   \   00000006   F011               BREQ    ??Twi_GetDataFromTransceiver_0
   \   00000008   E000               LDI     R16, 0
   \   0000000A   9508               RET
     69          	TwiRxTag=0;
   \                     ??Twi_GetDataFromTransceiver_0:
   \   0000000C   E030               LDI     R19, 0
   \   0000000E   9330....           STS     TwiRxTag, R19
     70          	for(i=0;i<n;i++)
   \   00000012   E040               LDI     R20, 0
   \   00000014   C00A               RJMP    ??Twi_GetDataFromTransceiver_1
     71          	{	buf[i]=TwiRxBuf[i];
   \                     ??Twi_GetDataFromTransceiver_2:
   \   00000016   E050               LDI     R21, 0
   \   00000018   01FA               MOVW    R31:R30, R21:R20
   \   0000001A   ....               SUBI    R30, LOW((-(TwiRxTag) & 0xFFFF))
   \   0000001C   ....               SBCI    R31, (-(TwiRxTag) & 0xFFFF) >> 8
   \   0000001E   8131               LDD     R19, Z+1
   \   00000020   01F8               MOVW    R31:R30, R17:R16
   \   00000022   0FE4               ADD     R30, R20
   \   00000024   1FF5               ADC     R31, R21
   \   00000026   8330               ST      Z, R19
     72          	}
   \   00000028   9543               INC     R20
   \                     ??Twi_GetDataFromTransceiver_1:
   \   0000002A   1742               CP      R20, R18
   \   0000002C   F3A0               BRCS    ??Twi_GetDataFromTransceiver_2
     73          	return 1;
   \   0000002E   E001               LDI     R16, 1
   \   00000030   9508               RET
     74          }
     75          
     76          /*
     77           *功能：
     78           *入口：
     79           *出口：
     80           *备注：
     81           *函数性质：
     82           */
     83          #pragma vector=TWI_vect

   \                                 In  segment CODE, align 2, keep-with-next
     84          __interrupt void TWI_ISR (void)
   \                     TWI_ISR:
     85          {	int8u state=TWSR&0xFC;
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   93FA               ST      -Y, R31
   \   00000006   93EA               ST      -Y, R30
   \   00000008   933A               ST      -Y, R19
   \   0000000A   932A               ST      -Y, R18
   \   0000000C   931A               ST      -Y, R17
   \   0000000E   930A               ST      -Y, R16
   \   00000010   B73F               IN      R19, 0x3F
   \   00000012   9100....           LDS     R16, _A_TWSR
   \   00000016   7F0C               ANDI    R16, 0xFC
     86          	
     87          	
     88          	switch(state)
   \   00000018   5800               SUBI    R16, 128
   \   0000001A   F139               BREQ    ??TWI_ISR_0
   \   0000001C   5200               SUBI    R16, 32
   \   0000001E   F1C9               BREQ    ??TWI_ISR_1
   \   00000020   5008               SUBI    R16, 8
   \   00000022   F029               BREQ    ??TWI_ISR_2
   \   00000024   5100               SUBI    R16, 16
   \   00000026   F031               BREQ    ??TWI_ISR_3
   \   00000028   5A08               SUBI    R16, 168
   \   0000002A   F0C9               BREQ    ??TWI_ISR_4
   \   0000002C   C039               RJMP    ??TWI_ISR_5
     89          	{	case 0xA8:
     90          				TwiTxBufPtr=0;				
   \                     ??TWI_ISR_2:
   \   0000002E   E000               LDI     R16, 0
   \   00000030   9300....           STS     (TwiRxTag + 12), R16
     91          		case 0xB8:
     92          				if(TwiTxBufPtr<TWI_BUF_SIZE)
   \                     ??TWI_ISR_3:
   \   00000034   ....               LDI     R30, LOW(TwiRxTag)
   \   00000036   ....               LDI     R31, (TwiRxTag) >> 8
   \   00000038   8504               LDD     R16, Z+12
   \   0000003A   3005               CPI     R16, 5
   \   0000003C   F460               BRCC    ??TWI_ISR_6
     93          					TWDR=TwiTxBuf[TwiTxBufPtr++];
   \   0000003E   E010               LDI     R17, 0
   \   00000040   01DF               MOVW    R27:R26, R31:R30
   \   00000042   0FA0               ADD     R26, R16
   \   00000044   1FB1               ADC     R27, R17
   \   00000046   9617               ADIW    R27:R26, 7
   \   00000048   910C               LD      R16, X
   \   0000004A   9300....           STS     _A_TWDR, R16
   \   0000004E   8504               LDD     R16, Z+12
   \   00000050   9503               INC     R16
   \   00000052   8704               STD     Z+12, R16
   \   00000054   C025               RJMP    ??TWI_ISR_5
     94          				else
     95          					TWDR=0xaa;
   \                     ??TWI_ISR_6:
   \   00000056   EA0A               LDI     R16, 170
   \   00000058   9300....           STS     _A_TWDR, R16
   \   0000005C   C021               RJMP    ??TWI_ISR_5
     96          				break;
     97          		case 0x60:
     98          				TwiRxTag=1;
   \                     ??TWI_ISR_4:
   \   0000005E   ....               LDI     R30, LOW(TwiRxTag)
   \   00000060   ....               LDI     R31, (TwiRxTag) >> 8
   \   00000062   E001               LDI     R16, 1
   \   00000064   8300               ST      Z, R16
     99          				TwiRxBufPtr=0;
   \   00000066   E000               LDI     R16, 0
   \   00000068   C012               RJMP    ??TWI_ISR_7
    100          				break;
    101          		case 0x80:
    102          				if(TwiRxTag==1)TwiRxTag=2;
   \                     ??TWI_ISR_0:
   \   0000006A   ....               LDI     R30, LOW(TwiRxTag)
   \   0000006C   ....               LDI     R31, (TwiRxTag) >> 8
   \   0000006E   8100               LD      R16, Z
   \   00000070   3001               CPI     R16, 1
   \   00000072   F411               BRNE    ??TWI_ISR_8
   \   00000074   E002               LDI     R16, 2
   \   00000076   8300               ST      Z, R16
    103          				TwiRxBuf[TwiRxBufPtr++]=TWDR;
   \                     ??TWI_ISR_8:
   \   00000078   9120....           LDS     R18, _A_TWDR
   \   0000007C   8106               LDD     R16, Z+6
   \   0000007E   E010               LDI     R17, 0
   \   00000080   01DF               MOVW    R27:R26, R31:R30
   \   00000082   0FA0               ADD     R26, R16
   \   00000084   1FB1               ADC     R27, R17
   \   00000086   9611               ADIW    R27:R26, 1
   \   00000088   932C               ST      X, R18
   \   0000008A   8106               LDD     R16, Z+6
   \   0000008C   9503               INC     R16
   \                     ??TWI_ISR_7:
   \   0000008E   8306               STD     Z+6, R16
    104          				break;
   \   00000090   C007               RJMP    ??TWI_ISR_5
    105          		case 0xA0:
    106          				if(TwiRxTag==2)TwiRxTag=3;
   \                     ??TWI_ISR_1:
   \   00000092   ....               LDI     R30, LOW(TwiRxTag)
   \   00000094   ....               LDI     R31, (TwiRxTag) >> 8
   \   00000096   8100               LD      R16, Z
   \   00000098   3002               CPI     R16, 2
   \   0000009A   F411               BRNE    ??TWI_ISR_5
   \   0000009C   E003               LDI     R16, 3
   \   0000009E   8300               ST      Z, R16
    107          				break;
    108          		default:
    109          				break;
    110          	}
    111          	TWI_ENABLE();
   \                     ??TWI_ISR_5:
   \   000000A0   EC05               LDI     R16, 197
   \   000000A2   9300....           STS     _A_TWCR, R16
    112          }
   \   000000A6   BF3F               OUT     0x3F, R19
   \   000000A8   9109               LD      R16, Y+
   \   000000AA   9119               LD      R17, Y+
   \   000000AC   9129               LD      R18, Y+
   \   000000AE   9139               LD      R19, Y+
   \   000000B0   91E9               LD      R30, Y+
   \   000000B2   91F9               LD      R31, Y+
   \   000000B4   91A9               LD      R26, Y+
   \   000000B6   91B9               LD      R27, Y+
   \   000000B8   9518               RETI
   \   000000BA                      REQUIRE _A_TWSR
   \   000000BA                      REQUIRE _A_TWDR
   \   000000BA                      REQUIRE _A_TWCR

   \                                 In  segment INTVEC, offset 0x30, root
   \                     `??TWI_ISR??INTVEC 48`:
   \   00000030   ....               RJMP    TWI_ISR

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      8      2   TWI_ISR
      0      2   Twi_GetDataFromTransceiver
      0      2   Twi_SlaveInit
      0      2   Twi_TransceiverStaWithData


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??TWI_ISR??INTVEC 48
     186  TWI_ISR
      13  TwiRxTag
          TwiRxBuf
          TwiRxBufPtr
          TwiTxBuf
          TwiTxBufPtr
      50  Twi_GetDataFromTransceiver
      20  Twi_SlaveInit
      46  Twi_TransceiverStaWithData
       1  _A_TWAR
       1  _A_TWCR
       1  _A_TWDR
       1  _A_TWSR
       6  -- Other

 
   4 bytes in segment ABSOLUTE
 302 bytes in segment CODE
   6 bytes in segment INITTAB
   2 bytes in segment INTVEC
  13 bytes in segment NEAR_Z
 
 302 bytes of CODE memory (+ 8 bytes shared)
  13 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
