###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        30/May/2018  14:28:52 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\罗盘\源代码 s120118 t\src\Comp.c                      #
#    Command line =  "G:\罗盘\源代码 s120118 t\src\Comp.c" --cpu=m88 -ms -o   #
#                    "G:\罗盘\源代码 s120118 t\Debug\Obj\" -lCN               #
#                    "G:\罗盘\源代码 s120118 t\Debug\List\"                   #
#                    --initializers_in_flash --no_inline --no_cross_call      #
#                    --no_tbaa --debug -DENABLE_BIT_DEFINITIONS -e            #
#                    --eeprom_size 512 --clib -Om                             #
#    List file    =  G:\罗盘\源代码 s120118 t\Debug\List\Comp.lst             #
#    Object file  =  G:\罗盘\源代码 s120118 t\Debug\Obj\Comp.r90              #
#                                                                             #
#                                                                             #
###############################################################################

G:\罗盘\源代码 s120118 t\src\Comp.c
      1          
      2          /*******************************Copyright (c)***************************/
      3          /*
      4           *                         深圳铭之光电子技术有限公司
      5           *                         工　　　　　程　　　　　部
      6           *                         http://www.sinocomopto.com
      7           */
      8          /***********************************************************************/
      9          #define  __COMP_C__
     10          #include  "_Include.h"

   \                                 In  segment ABSOLUTE, at 0x25
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1
     11          /***********************************************************************/
     12          	#define PNI_DRDY_IN()		DDRB_DDB0=0             //write
     13          	#define PNI_MISO_IN()		DDRB_DDB4=0
     14          	
     15          	#define PNI_DRDY_RD			PINB_PINB0
     16          	#define PNI_MISO_RD			PINB_PINB4
     17          	
     18          	#define PNI_DRDY_OUT()		DDRB_DDB1=1
     19          	#define PNI_SSNOT_OUT()		DDRB_DDB2=1
     20          	#define PNI_MOSI_OUT()		DDRB_DDB3=1
     21          	#define PNI_SCK_OUT()		DDRB_DDB5=1
     22          	
     23          	#define PNI_RST_ON()		PORTB_PORTB1=1          
     24          	#define PNI_SSNOT_ON()		PORTB_PORTB2=1
     25          	#define PNI_MOSI_ON()		PORTB_PORTB3=1
     26          	#define PNI_SCK_ON()		PORTB_PORTB5=1
     27          	
     28          	#define PNI_RST_OFF()		PORTB_PORTB1=0
     29          	#define PNI_SSNOT_OFF()		PORTB_PORTB2=0
     30          	#define PNI_MOSI_OFF()		PORTB_PORTB3=0
     31          	#define PNI_SCK_OFF()		PORTB_PORTB5=0
     32          
     33          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     34          	int16s	XGain;
     35          	int16s	YGain;
     36          	int16s	XOffset;
     37          	int16s	YOffset;
     38          	float	SinPhi;
   \                     SinPhi:
   \   00000000                      DS8 4
     39          	float	OneOverCosPhi;
   \                     OneOverCosPhi:
   \   00000004                      DS8 4
   \                     XGain:
   \   00000008                      DS8 2
   \                     YGain:
   \   0000000A                      DS8 2
   \                     XOffset:
   \   0000000C                      DS8 2
   \                     YOffset:
   \   0000000E                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     40          	static	int16s	XAdcCalBuf[3];
   \                     XAdcCalBuf:
   \   00000000                      DS8 6
   \   00000006                      DS8 6
     41          	static	int16s	YAdcCalBuf[3];
     42          	
     43          /***********************************************************************/
     44          /*
     45           *功能：
     46           *入口：
     47           *出口：
     48           *备注：
     49           *函数性质：
     50           */

   \                                 In  segment CODE, align 2, keep-with-next
     51          void Comp_HardwareInit(void)
   \                     Comp_HardwareInit:
     52          {
     53          	PNI_SSNOT_ON();
   \   00000000   9A2A               SBI     0x05, 0x02
     54          	PNI_SCK_ON();
   \   00000002   9A2D               SBI     0x05, 0x05
     55          	PNI_MOSI_ON();
   \   00000004   9A2B               SBI     0x05, 0x03
     56          	PNI_RST_OFF();
   \   00000006   9829               CBI     0x05, 0x01
     57          	
     58          	PNI_SSNOT_OUT();
   \   00000008   9A22               SBI     0x04, 0x02
     59          	PNI_DRDY_OUT();
   \   0000000A   9A21               SBI     0x04, 0x01
     60          	PNI_SCK_OUT();
   \   0000000C   9A25               SBI     0x04, 0x05
     61          	PNI_MOSI_OUT();
   \   0000000E   9A23               SBI     0x04, 0x03
     62          	PNI_MISO_IN();
   \   00000010   9824               CBI     0x04, 0x04
     63          	PNI_DRDY_IN();
   \   00000012   9820               CBI     0x04, 0x00
     64          }
   \   00000014   9508               RET
   \   00000016                      REQUIRE _A_PORTB
   \   00000016                      REQUIRE _A_DDRB
     65          
     66          
     67          /*
     68           *功能：
     69           *入口：
     70           *出口：
     71           *备注：
     72           *函数性质：内部函数
     73           */

   \                                 In  segment CODE, align 2, keep-with-next
     74          void Comp_SpiSta (void)
   \                     Comp_SpiSta:
     75          {
     76          	PNI_SSNOT_OFF();
   \   00000000   982A               CBI     0x05, 0x02
     77          	PNI_RST_OFF();
   \   00000002   9829               CBI     0x05, 0x01
     78          	PNI_SCK_OFF();
   \   00000004   982D               CBI     0x05, 0x05
     79          	PNI_RST_ON();
   \   00000006   9A29               SBI     0x05, 0x01
     80          	PNI_RST_OFF();
   \   00000008   9829               CBI     0x05, 0x01
     81          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_PORTB
     82          
     83          /*
     84           *功能：
     85           *入口：
     86           *出口：
     87           *备注：
     88           *函数性质：
     89           */

   \                                 In  segment CODE, align 2, keep-with-next
     90          int8u Comp_SpiBusyTest (void)
   \                     Comp_SpiBusyTest:
     91          {
     92          	return(PNI_DRDY_RD&0x01);
   \   00000000   E000               LDI     R16, 0
   \   00000002   9918               SBIC    0x03, 0x00
   \   00000004   E001               LDI     R16, 1
   \                     ??Comp_SpiBusyTest_0:
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_PINB
     93          	//delay_ms(10);
     94          	//return(1);
     95          }
     96          
     97          /*
     98           *功能：
     99           *入口：
    100           *出口：
    101           *备注：
    102           *函数性质：
    103           */

   \                                 In  segment CODE, align 2, keep-with-next
    104          void Comp_SpiByteSend (int8u val)
   \                     Comp_SpiByteSend:
    105          {	int8u i;
    106          	
    107          	
    108          	for(i=0x80;i;i>>=1)
   \   00000000   E810               LDI     R17, 128
   \   00000002   C004               RJMP    ??Comp_SpiByteSend_0
    109          	{	if(val&i)PNI_MOSI_ON();
    110          		else     PNI_MOSI_OFF();
   \                     ??Comp_SpiByteSend_1:
   \   00000004   982B               CBI     0x05, 0x03
    111          		PNI_SCK_ON();
   \                     ??Comp_SpiByteSend_2:
   \   00000006   9A2D               SBI     0x05, 0x05
    112          		PNI_SCK_OFF();
   \   00000008   982D               CBI     0x05, 0x05
   \   0000000A   9516               LSR     R17
   \                     ??Comp_SpiByteSend_0:
   \   0000000C   2311               TST     R17
   \   0000000E   F029               BREQ    ??Comp_SpiByteSend_3
   \   00000010   2F20               MOV     R18, R16
   \   00000012   2321               AND     R18, R17
   \   00000014   F3B9               BREQ    ??Comp_SpiByteSend_1
   \   00000016   9A2B               SBI     0x05, 0x03
   \   00000018   CFF6               RJMP    ??Comp_SpiByteSend_2
    113          	}
    114          }
   \                     ??Comp_SpiByteSend_3:
   \   0000001A   9508               RET
   \   0000001C                      REQUIRE _A_PORTB
    115          
    116          /*
    117           *功能：
    118           *入口：
    119           *出口：
    120           *备注：
    121           *函数性质：
    122           */

   \                                 In  segment CODE, align 2, keep-with-next
    123          int16s Comp_SpiByteGet (void)
   \                     Comp_SpiByteGet:
    124          {	int16s val=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
    125          	int16u i;
    126          	
    127          	
    128          	PNI_SCK_OFF();
   \   00000004   982D               CBI     0x05, 0x05
    129          	for(i=0x8000;i;i>>=1)
   \   00000006   E020               LDI     R18, 0
   \   00000008   E830               LDI     R19, 128
   \   0000000A   C008               RJMP    ??Comp_SpiByteGet_0
    130          	{	PNI_SCK_ON();
   \                     ??Comp_SpiByteGet_1:
   \   0000000C   9A2D               SBI     0x05, 0x05
    131          		if(PNI_MISO_RD&0x01){val|=i;}
   \   0000000E   9B1C               SBIS    0x03, 0x04
   \   00000010   C002               RJMP    ??Comp_SpiByteGet_2
   \   00000012   2B02               OR      R16, R18
   \   00000014   2B13               OR      R17, R19
    132          		PNI_SCK_OFF();
   \                     ??Comp_SpiByteGet_2:
   \   00000016   982D               CBI     0x05, 0x05
    133          	}
   \   00000018   9536               LSR     R19
   \   0000001A   9527               ROR     R18
   \                     ??Comp_SpiByteGet_0:
   \   0000001C   2F42               MOV     R20, R18
   \   0000001E   2B43               OR      R20, R19
   \   00000020   F7A9               BRNE    ??Comp_SpiByteGet_1
    134          	return val;
   \   00000022   9508               RET
   \   00000024                      REQUIRE _A_PORTB
   \   00000024                      REQUIRE _A_PINB
    135          }
    136          
    137          /*
    138           *功能：
    139           *入口：
    140           *出口：
    141           *备注：
    142           *函数性质：内部函数
    143           */

   \                                 In  segment CODE, align 2, keep-with-next
    144          void Comp_SpiEnd (void)
   \                     Comp_SpiEnd:
    145          {
    146          	PNI_SSNOT_ON();
   \   00000000   9A2A               SBI     0x05, 0x02
    147          }
   \   00000002   9508               RET
   \   00000004                      REQUIRE _A_PORTB
    148          
    149          /*
    150           *功能：
    151           *入口：
    152           *出口：
    153           *备注：
    154           *函数性质：
    155           */

   \                                 In  segment CODE, align 2, keep-with-next
    156          int16s Comp_GetAdc (int8u cmd)
   \                     Comp_GetAdc:
    157          {	int16s val;
   \   00000000   ....               RCALL   ?PROLOGUE2_L09
   \   00000002   2F80               MOV     R24, R16
    158          	
    159          	
    160          	Comp_SpiSta();
   \   00000004   ....               RCALL   Comp_SpiSta
    161          	Comp_SpiByteSend(cmd);		//0x51,0x52
   \   00000006   2F08               MOV     R16, R24
   \   00000008   ....               RCALL   Comp_SpiByteSend
    162          	while(!Comp_SpiBusyTest());
   \                     ??Comp_GetAdc_0:
   \   0000000A   ....               RCALL   Comp_SpiBusyTest
   \   0000000C   2300               TST     R16
   \   0000000E   F3E9               BREQ    ??Comp_GetAdc_0
    163          	val=Comp_SpiByteGet();
   \   00000010   ....               RCALL   Comp_SpiByteGet
   \   00000012   01C8               MOVW    R25:R24, R17:R16
    164          	Comp_SpiEnd();
   \   00000014   ....               RCALL   Comp_SpiEnd
    165          	return val;
   \   00000016   018C               MOVW    R17:R16, R25:R24
   \   00000018   E0E2               LDI     R30, 2
   \   0000001A   ....               RJMP    ?EPILOGUE_B2_L09
    166          }
    167          
    168          /***********************************************************************/
    169          /*
    170           *功能：
    171           *入口：
    172           *出口：
    173           *备注：
    174           *函数性质：
    175           */

   \                                 In  segment CODE, align 2, keep-with-next
    176          int16s Comp_MidFilter (int16s* buf)
   \                     Comp_MidFilter:
    177          {	int16s min=buf[0];
   \   00000000   01F8               MOVW    R31:R30, R17:R16
   \   00000002   8140               LD      R20, Z
   \   00000004   8151               LDD     R21, Z+1
    178          	int16s max=min;
   \   00000006   01BA               MOVW    R23:R22, R21:R20
    179          	int16s sum=max;
   \   00000008   019B               MOVW    R19:R18, R23:R22
    180          	
    181          	
    182          	if(min>buf[1])min=buf[1];
   \   0000000A   8002               LDD     R0, Z+2
   \   0000000C   8013               LDD     R1, Z+3
   \   0000000E   1604               CP      R0, R20
   \   00000010   0615               CPC     R1, R21
   \   00000012   F40C               BRGE    ??Comp_MidFilter_0
   \   00000014   01A0               MOVW    R21:R20, R1:R0
    183          	if(max<buf[1])max=buf[1];
   \                     ??Comp_MidFilter_0:
   \   00000016   1560               CP      R22, R0
   \   00000018   0571               CPC     R23, R1
   \   0000001A   F40C               BRGE    ??Comp_MidFilter_1
   \   0000001C   01B0               MOVW    R23:R22, R1:R0
    184          	sum+=buf[1];
   \                     ??Comp_MidFilter_1:
   \   0000001E   0D20               ADD     R18, R0
   \   00000020   1D31               ADC     R19, R1
    185          	if(min>buf[2])min=buf[2];
   \   00000022   8104               LDD     R16, Z+4
   \   00000024   8115               LDD     R17, Z+5
   \   00000026   1704               CP      R16, R20
   \   00000028   0715               CPC     R17, R21
   \   0000002A   F40C               BRGE    ??Comp_MidFilter_2
   \   0000002C   01A8               MOVW    R21:R20, R17:R16
    186          	if(max<buf[2])max=buf[2];
   \                     ??Comp_MidFilter_2:
   \   0000002E   1760               CP      R22, R16
   \   00000030   0771               CPC     R23, R17
   \   00000032   F40C               BRGE    ??Comp_MidFilter_3
   \   00000034   01B8               MOVW    R23:R22, R17:R16
    187          	sum+=buf[2];
    188          	return (sum-min-max);
   \                     ??Comp_MidFilter_3:
   \   00000036   0F20               ADD     R18, R16
   \   00000038   1F31               ADC     R19, R17
   \   0000003A   1B24               SUB     R18, R20
   \   0000003C   0B35               SBC     R19, R21
   \   0000003E   1B26               SUB     R18, R22
   \   00000040   0B37               SBC     R19, R23
   \   00000042   0189               MOVW    R17:R16, R19:R18
   \   00000044   9508               RET
    189          }
    190          
    191          /*
    192           *功能：
    193           *入口：
    194           *出口：
    195           *备注：
    196           *函数性质：公共
    197           */

   \                                 In  segment CODE, align 2, keep-with-next
    198          void Comp_AdcCorrectS (int16s* x_ptr,int16s* y_ptr)
   \                     Comp_AdcCorrectS:
    199          {	float x,y;
   \   00000000   ....               RCALL   ?PROLOGUE16_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
   \   00000002                      REQUIRE ?Register_R12_is_cg_reg
   \   00000002                      REQUIRE ?Register_R13_is_cg_reg
   \   00000002                      REQUIRE ?Register_R14_is_cg_reg
   \   00000002                      REQUIRE ?Register_R15_is_cg_reg
   \   00000002   9722               SBIW    R29:R28, 2
   \   00000004   8328               ST      Y, R18
   \   00000006   8339               STD     Y+1, R19
   \   00000008   01C8               MOVW    R25:R24, R17:R16
    200          	
    201          	
    202          	x = ((float)(*x_ptr - XOffset)) / XGain;
    203          	y = ((float)(*y_ptr - YOffset)) / YGain;
   \   0000000A   ....               LDI     R26, LOW(SinPhi)
   \   0000000C   ....               LDI     R27, (SinPhi) >> 8
   \   0000000E   81E8               LD      R30, Y
   \   00000010   81F9               LDD     R31, Y+1
   \   00000012   8100               LD      R16, Z
   \   00000014   8111               LDD     R17, Z+1
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   8526               LDD     R18, Z+14
   \   0000001A   8537               LDD     R19, Z+15
   \   0000001C   1B02               SUB     R16, R18
   \   0000001E   0B13               SBC     R17, R19
   \   00000020   2F21               MOV     R18, R17
   \   00000022   0F22               LSL     R18
   \   00000024   0B22               SBC     R18, R18
   \   00000026   2F32               MOV     R19, R18
   \   00000028   ....               RCALL   ?SL2F_L04
   \   0000002A   0128               MOVW    R5:R4, R17:R16
   \   0000002C   0139               MOVW    R7:R6, R19:R18
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   8502               LDD     R16, Z+10
   \   00000032   8513               LDD     R17, Z+11
   \   00000034   2F21               MOV     R18, R17
   \   00000036   0F22               LSL     R18
   \   00000038   0B22               SBC     R18, R18
   \   0000003A   2F32               MOV     R19, R18
   \   0000003C   ....               RCALL   ?SL2F_L04
   \   0000003E   01A8               MOVW    R21:R20, R17:R16
   \   00000040   01B9               MOVW    R23:R22, R19:R18
   \   00000042   0182               MOVW    R17:R16, R5:R4
   \   00000044   0193               MOVW    R19:R18, R7:R6
   \   00000046   ....               RCALL   ?F_DIV_L04
   \   00000048   0148               MOVW    R9:R8, R17:R16
   \   0000004A   0159               MOVW    R11:R10, R19:R18
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8500               LDD     R16, Z+8
   \   00000050   8511               LDD     R17, Z+9
   \   00000052   2F21               MOV     R18, R17
   \   00000054   0F22               LSL     R18
   \   00000056   0B22               SBC     R18, R18
   \   00000058   2F32               MOV     R19, R18
   \   0000005A   ....               RCALL   ?SL2F_L04
   \   0000005C   0128               MOVW    R5:R4, R17:R16
   \   0000005E   0139               MOVW    R7:R6, R19:R18
   \   00000060   01FC               MOVW    R31:R30, R25:R24
   \   00000062   8100               LD      R16, Z
   \   00000064   8111               LDD     R17, Z+1
   \   00000066   01FD               MOVW    R31:R30, R27:R26
   \   00000068   8524               LDD     R18, Z+12
   \   0000006A   8535               LDD     R19, Z+13
   \   0000006C   1B02               SUB     R16, R18
   \   0000006E   0B13               SBC     R17, R19
   \   00000070   2F21               MOV     R18, R17
   \   00000072   0F22               LSL     R18
   \   00000074   0B22               SBC     R18, R18
   \   00000076   2F32               MOV     R19, R18
   \   00000078   ....               RCALL   ?SL2F_L04
   \   0000007A   01A2               MOVW    R21:R20, R5:R4
   \   0000007C   01B3               MOVW    R23:R22, R7:R6
   \   0000007E   ....               RCALL   ?F_DIV_L04
   \   00000080   0168               MOVW    R13:R12, R17:R16
   \   00000082   0179               MOVW    R15:R14, R19:R18
   \   00000084   910D               LD      R16, X+
   \   00000086   911D               LD      R17, X+
   \   00000088   912D               LD      R18, X+
   \   0000008A   913C               LD      R19, X
   \   0000008C   9713               SBIW    R27:R26, 3
   \   0000008E   01A4               MOVW    R21:R20, R9:R8
   \   00000090   01B5               MOVW    R23:R22, R11:R10
   \   00000092   ....               RCALL   ?F_MUL_L04
   \   00000094   01A8               MOVW    R21:R20, R17:R16
   \   00000096   01B9               MOVW    R23:R22, R19:R18
   \   00000098   0186               MOVW    R17:R16, R13:R12
   \   0000009A   0197               MOVW    R19:R18, R15:R14
   \   0000009C   ....               RCALL   ?F_SUB_L04
   \   0000009E   01FD               MOVW    R31:R30, R27:R26
   \   000000A0   8144               LDD     R20, Z+4
   \   000000A2   8155               LDD     R21, Z+5
   \   000000A4   8166               LDD     R22, Z+6
   \   000000A6   8177               LDD     R23, Z+7
   \   000000A8   ....               RCALL   ?F_MUL_L04
   \   000000AA   01A2               MOVW    R21:R20, R5:R4
   \   000000AC   01B3               MOVW    R23:R22, R7:R6
   \   000000AE   ....               RCALL   ?F_MUL_L04
   \   000000B0   ....               RCALL   ?F2SL_L04
   \   000000B2   01FC               MOVW    R31:R30, R25:R24
   \   000000B4   8300               ST      Z, R16
   \   000000B6   8311               STD     Z+1, R17
    204          	x = x - y * SinPhi;
    205          	x = x * OneOverCosPhi;
    206          	*x_ptr=(int16s)(x*XGain);
    207          	*y_ptr=(int16s)(y*XGain);
   \   000000B8   01FD               MOVW    R31:R30, R27:R26
   \   000000BA   8500               LDD     R16, Z+8
   \   000000BC   8511               LDD     R17, Z+9
   \   000000BE   2F21               MOV     R18, R17
   \   000000C0   0F22               LSL     R18
   \   000000C2   0B22               SBC     R18, R18
   \   000000C4   2F32               MOV     R19, R18
   \   000000C6   ....               RCALL   ?SL2F_L04
   \   000000C8   01A4               MOVW    R21:R20, R9:R8
   \   000000CA   01B5               MOVW    R23:R22, R11:R10
   \   000000CC   ....               RCALL   ?F_MUL_L04
   \   000000CE   ....               RCALL   ?F2SL_L04
   \   000000D0   81A8               LD      R26, Y
   \   000000D2   81B9               LDD     R27, Y+1
   \   000000D4   930D               ST      X+, R16
   \   000000D6   931C               ST      X, R17
    208          }
   \   000000D8   9622               ADIW    R29:R28, 2
   \   000000DA   E1E0               LDI     R30, 16
   \   000000DC   ....               RJMP    ?EPILOGUE_B16_L09
    209          
    210          #define OFFSET (1440+90)
    211          /*
    212           *功能：
    213           *入口：
    214           *出口：
    215           *备注：
    216           *函数性质：
    217           */

   \                                 In  segment CODE, align 2, keep-with-next
    218          void Comp_AngCntProc (void)
   \                     Comp_AngCntProc:
    219          {	int16s adc_x;
   \   00000000   ....               RCALL   ?PROLOGUE8_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002   9724               SBIW    R29:R28, 4
    220          	int16s adc_y;
    221          	int8u  tag;
    222          	int16s ang;
    223          	
    224          	
    225          	adc_x=Comp_GetAdc(0x51);
   \   00000004   E501               LDI     R16, 81
   \   00000006   ....               RCALL   Comp_GetAdc
   \   00000008   830A               STD     Y+2, R16
   \   0000000A   831B               STD     Y+3, R17
    226          	adc_y=Comp_GetAdc(0x52);
   \   0000000C   E502               LDI     R16, 82
   \   0000000E   ....               RCALL   Comp_GetAdc
   \   00000010   8308               ST      Y, R16
   \   00000012   8319               STD     Y+1, R17
    227          	Comp_AdcCorrectS(&adc_x,&adc_y);		//软硬磁校准
   \   00000014   019E               MOVW    R19:R18, R29:R28
   \   00000016   018E               MOVW    R17:R16, R29:R28
   \   00000018   5F0E               SUBI    R16, 254
   \   0000001A   4F1F               SBCI    R17, 255
   \   0000001C   ....               RCALL   Comp_AdcCorrectS
    228          	if(0==adc_x)adc_x=1;
   \   0000001E   810A               LDD     R16, Y+2
   \   00000020   811B               LDD     R17, Y+3
   \   00000022   2B01               OR      R16, R17
   \   00000024   F421               BRNE    ??Comp_AngCntProc_0
   \   00000026   E001               LDI     R16, 1
   \   00000028   E010               LDI     R17, 0
   \   0000002A   830A               STD     Y+2, R16
   \   0000002C   831B               STD     Y+3, R17
    229          	if(0==adc_y)adc_y=1;
   \                     ??Comp_AngCntProc_0:
   \   0000002E   8108               LD      R16, Y
   \   00000030   8119               LDD     R17, Y+1
   \   00000032   2B01               OR      R16, R17
   \   00000034   F421               BRNE    ??Comp_AngCntProc_1
   \   00000036   E001               LDI     R16, 1
   \   00000038   E010               LDI     R17, 0
   \   0000003A   8308               ST      Y, R16
   \   0000003C   8319               STD     Y+1, R17
    230          	if     ( (adc_x<0)&&(adc_y>0) ){ tag=2;	adc_x=-adc_x;					}
   \                     ??Comp_AngCntProc_1:
   \   0000003E   811B               LDD     R17, Y+3
   \   00000040   2311               TST     R17
   \   00000042   F472               BRPL    ??Comp_AngCntProc_2
   \   00000044   8188               LD      R24, Y
   \   00000046   8199               LDD     R25, Y+1
   \   00000048   3081               CPI     R24, 1
   \   0000004A   4090               SBCI    R25, 0
   \   0000004C   F04C               BRLT    ??Comp_AngCntProc_2
   \   0000004E   E082               LDI     R24, 2
   \   00000050   810A               LDD     R16, Y+2
   \   00000052   811B               LDD     R17, Y+3
   \   00000054   9511               NEG     R17
   \   00000056   9501               NEG     R16
   \   00000058   4010               SBCI    R17, 0
   \   0000005A   830A               STD     Y+2, R16
   \   0000005C   831B               STD     Y+3, R17
   \   0000005E   C021               RJMP    ??Comp_AngCntProc_3
    231          	else if( (adc_x<0)&&(adc_y<0) ){ tag=3;	adc_x=-adc_x;	adc_y=-adc_y;	}
   \                     ??Comp_AngCntProc_2:
   \   00000060   811B               LDD     R17, Y+3
   \   00000062   2311               TST     R17
   \   00000064   F462               BRPL    ??Comp_AngCntProc_4
   \   00000066   8119               LDD     R17, Y+1
   \   00000068   2311               TST     R17
   \   0000006A   F44A               BRPL    ??Comp_AngCntProc_4
   \   0000006C   E083               LDI     R24, 3
   \   0000006E   810A               LDD     R16, Y+2
   \   00000070   811B               LDD     R17, Y+3
   \   00000072   9511               NEG     R17
   \   00000074   9501               NEG     R16
   \   00000076   4010               SBCI    R17, 0
   \   00000078   830A               STD     Y+2, R16
   \   0000007A   831B               STD     Y+3, R17
   \   0000007C   C009               RJMP    ??Comp_AngCntProc_5
    232          	else if( (adc_x>0)&&(adc_y<0) ){ tag=4;					adc_y=-adc_y;	}
   \                     ??Comp_AngCntProc_4:
   \   0000007E   818A               LDD     R24, Y+2
   \   00000080   819B               LDD     R25, Y+3
   \   00000082   3081               CPI     R24, 1
   \   00000084   4090               SBCI    R25, 0
   \   00000086   F064               BRLT    ??Comp_AngCntProc_6
   \   00000088   8119               LDD     R17, Y+1
   \   0000008A   2311               TST     R17
   \   0000008C   F44A               BRPL    ??Comp_AngCntProc_6
   \   0000008E   E084               LDI     R24, 4
   \                     ??Comp_AngCntProc_5:
   \   00000090   8108               LD      R16, Y
   \   00000092   8119               LDD     R17, Y+1
   \   00000094   9511               NEG     R17
   \   00000096   9501               NEG     R16
   \   00000098   4010               SBCI    R17, 0
   \   0000009A   8308               ST      Y, R16
   \   0000009C   8319               STD     Y+1, R17
   \   0000009E   C001               RJMP    ??Comp_AngCntProc_3
    233          	else                           { tag=1;									}
   \                     ??Comp_AngCntProc_6:
   \   000000A0   E081               LDI     R24, 1
    234          	ang=(int16s)((atan( (float) adc_x/adc_y))/3.14*1800);
   \                     ??Comp_AngCntProc_3:
   \   000000A2   810A               LDD     R16, Y+2
   \   000000A4   811B               LDD     R17, Y+3
   \   000000A6   2F21               MOV     R18, R17
   \   000000A8   0F22               LSL     R18
   \   000000AA   0B22               SBC     R18, R18
   \   000000AC   2F32               MOV     R19, R18
   \   000000AE   ....               RCALL   ?SL2F_L04
   \   000000B0   0128               MOVW    R5:R4, R17:R16
   \   000000B2   0139               MOVW    R7:R6, R19:R18
   \   000000B4   8108               LD      R16, Y
   \   000000B6   8119               LDD     R17, Y+1
   \   000000B8   2F21               MOV     R18, R17
   \   000000BA   0F22               LSL     R18
   \   000000BC   0B22               SBC     R18, R18
   \   000000BE   2F32               MOV     R19, R18
   \   000000C0   ....               RCALL   ?SL2F_L04
   \   000000C2   01A8               MOVW    R21:R20, R17:R16
   \   000000C4   01B9               MOVW    R23:R22, R19:R18
   \   000000C6   0182               MOVW    R17:R16, R5:R4
   \   000000C8   0193               MOVW    R19:R18, R7:R6
   \   000000CA   ....               RCALL   ?F_DIV_L04
   \   000000CC   ....               RCALL   atan
   \   000000CE   EC43               LDI     R20, 195
   \   000000D0   EF55               LDI     R21, 245
   \   000000D2   E468               LDI     R22, 72
   \   000000D4   E470               LDI     R23, 64
   \   000000D6   ....               RCALL   ?F_DIV_L04
   \   000000D8   E040               LDI     R20, 0
   \   000000DA   E050               LDI     R21, 0
   \   000000DC   EE61               LDI     R22, 225
   \   000000DE   E474               LDI     R23, 68
   \   000000E0   ....               RCALL   ?F_MUL_L04
   \   000000E2   ....               RCALL   ?F2SL_L04
    235          	switch(tag)
   \   000000E4   5082               SUBI    R24, 2
   \   000000E6   F051               BREQ    ??Comp_AngCntProc_7
   \   000000E8   958A               DEC     R24
   \   000000EA   F029               BREQ    ??Comp_AngCntProc_8
   \   000000EC   958A               DEC     R24
   \   000000EE   F459               BRNE    ??Comp_AngCntProc_9
    236          	{	case 4:		ang=1800-ang;	break;
   \   000000F0   E028               LDI     R18, 8
   \   000000F2   E037               LDI     R19, 7
   \   000000F4   C005               RJMP    ??Comp_AngCntProc_10
    237          		case 3:		ang=1800+ang;	break;
   \                     ??Comp_AngCntProc_8:
   \   000000F6   5F08               SUBI    R16, 248
   \   000000F8   4F18               SBCI    R17, 248
   \   000000FA   C005               RJMP    ??Comp_AngCntProc_9
    238          		case 2:		ang=3600-ang;	break;
   \                     ??Comp_AngCntProc_7:
   \   000000FC   E120               LDI     R18, 16
   \   000000FE   E03E               LDI     R19, 14
   \                     ??Comp_AngCntProc_10:
   \   00000100   1B20               SUB     R18, R16
   \   00000102   0B31               SBC     R19, R17
   \   00000104   0189               MOVW    R17:R16, R19:R18
    239          		case 1:		ang=ang;
    240          	}
    241          	//ang=Comp_AdcSmooth_L(ang);
    242          	CompVal=(OFFSET+CompOffset-ang/10)%360;
   \                     ??Comp_AngCntProc_9:
   \   00000106   9180....           LDS     R24, CompOffset
   \   0000010A   9190....           LDS     R25, (CompOffset + 1)
   \   0000010E   5086               SUBI    R24, 6
   \   00000110   4F9A               SBCI    R25, 250
   \   00000112   E04A               LDI     R20, 10
   \   00000114   E050               LDI     R21, 0
   \   00000116   ....               RCALL   ?SS_DIVMOD_L02
   \   00000118   1B80               SUB     R24, R16
   \   0000011A   0B91               SBC     R25, R17
   \   0000011C   018C               MOVW    R17:R16, R25:R24
   \   0000011E   E648               LDI     R20, 104
   \   00000120   E051               LDI     R21, 1
   \   00000122   ....               RCALL   ?US_DIVMOD_L02
   \   00000124   9200....           STS     CompVal, R0
   \   00000128   9210....           STS     (CompVal + 1), R1
    243          }
   \   0000012C   9624               ADIW    R29:R28, 4
   \   0000012E   E0E8               LDI     R30, 8
   \   00000130   ....               RJMP    ?EPILOGUE_B8_L09
    244          
    245          /*
    246           *功能：
    247           *入口：
    248           *出口：
    249           *备注：
    250           *函数性质：
    251           */

   \                                 In  segment CODE, align 2, keep-with-next
    252          void Comp_CalInit (void)
   \                     Comp_CalInit:
    253          {
    254          	CompCalTag=1;
   \   00000000   E001               LDI     R16, 1
   \   00000002   9300....           STS     CompCalTag, R16
    255          	
    256          	XMax =-32767;
   \   00000006   E810               LDI     R17, 128
   \   00000008   9300....           STS     XMax, R16
   \   0000000C   9310....           STS     (XMax + 1), R17
    257          	YMax =-32767;
   \   00000010   9300....           STS     YMax, R16
   \   00000014   9310....           STS     (YMax + 1), R17
    258          	XMin = 32767;
   \   00000018   EF0F               LDI     R16, 255
   \   0000001A   E71F               LDI     R17, 127
   \   0000001C   9300....           STS     XMin, R16
   \   00000020   9310....           STS     (XMin + 1), R17
    259          	YMin = 32767;
   \   00000024   9300....           STS     YMin, R16
   \   00000028   9310....           STS     (YMin + 1), R17
    260          }
   \   0000002C   9508               RET
    261          
    262          /*
    263           *功能：
    264           *入口：
    265           *出口：
    266           *备注：
    267           *函数性质：
    268           */

   \                                 In  segment CODE, align 2, keep-with-next
    269          void Comp_CalSampProc (void)
   \                     Comp_CalSampProc:
    270          {	int16s adc_x;
   \   00000000   ....               RCALL   ?PROLOGUE3_L09
    271          	int16s adc_y;
    272          	int8u  i;
    273          	
    274          	
    275          	for(i=0;i<3;i++)
   \   00000002   E0A0               LDI     R26, 0
   \   00000004   C012               RJMP    ??Comp_CalSampProc_0
    276          	{	XAdcCalBuf[i]=Comp_GetAdc(0x51);
   \                     ??Comp_CalSampProc_1:
   \   00000006   E002               LDI     R16, 2
   \   00000008   9FA0               MUL     R26, R16
   \   0000000A   01C0               MOVW    R25:R24, R1:R0
   \   0000000C   E501               LDI     R16, 81
   \   0000000E   ....               RCALL   Comp_GetAdc
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   ....               SUBI    R30, LOW((-(XAdcCalBuf) & 0xFFFF))
   \   00000014   ....               SBCI    R31, (-(XAdcCalBuf) & 0xFFFF) >> 8
   \   00000016   8300               ST      Z, R16
   \   00000018   8311               STD     Z+1, R17
    277          		YAdcCalBuf[i]=Comp_GetAdc(0x52);
   \   0000001A   E502               LDI     R16, 82
   \   0000001C   ....               RCALL   Comp_GetAdc
   \   0000001E   01FC               MOVW    R31:R30, R25:R24
   \   00000020   ....               SUBI    R30, LOW((-(XAdcCalBuf) & 0xFFFF))
   \   00000022   ....               SBCI    R31, (-(XAdcCalBuf) & 0xFFFF) >> 8
   \   00000024   8306               STD     Z+6, R16
   \   00000026   8317               STD     Z+7, R17
    278          	}
   \   00000028   95A3               INC     R26
   \                     ??Comp_CalSampProc_0:
   \   0000002A   30A3               CPI     R26, 3
   \   0000002C   F360               BRCS    ??Comp_CalSampProc_1
    279          	adc_x=Comp_MidFilter(XAdcCalBuf);
   \   0000002E   ....               LDI     R16, LOW(XAdcCalBuf)
   \   00000030   ....               LDI     R17, (XAdcCalBuf) >> 8
   \   00000032   ....               RCALL   Comp_MidFilter
   \   00000034   01C8               MOVW    R25:R24, R17:R16
    280          	adc_y=Comp_MidFilter(YAdcCalBuf);
   \   00000036   ....               LDI     R16, LOW((XAdcCalBuf + 6))
   \   00000038   ....               LDI     R17, HIGH((XAdcCalBuf + 6))
   \   0000003A   ....               RCALL   Comp_MidFilter
    281          	if(adc_x > XMax) { 		        XMax = adc_x; }
   \   0000003C   9120....           LDS     R18, XMax
   \   00000040   9130....           LDS     R19, (XMax + 1)
   \   00000044   1728               CP      R18, R24
   \   00000046   0739               CPC     R19, R25
   \   00000048   F424               BRGE    ??Comp_CalSampProc_2
   \   0000004A   9380....           STS     XMax, R24
   \   0000004E   9390....           STS     (XMax + 1), R25
    282          	if(adc_x < XMin) { 			XMin = adc_x; }
   \                     ??Comp_CalSampProc_2:
   \   00000052   9120....           LDS     R18, XMin
   \   00000056   9130....           LDS     R19, (XMin + 1)
   \   0000005A   1782               CP      R24, R18
   \   0000005C   0793               CPC     R25, R19
   \   0000005E   F424               BRGE    ??Comp_CalSampProc_3
   \   00000060   9380....           STS     XMin, R24
   \   00000064   9390....           STS     (XMin + 1), R25
    283          	if(adc_y > YMax) { XAtYMax = adc_x;	YMax = adc_y; }
   \                     ??Comp_CalSampProc_3:
   \   00000068   9120....           LDS     R18, YMax
   \   0000006C   9130....           LDS     R19, (YMax + 1)
   \   00000070   1720               CP      R18, R16
   \   00000072   0731               CPC     R19, R17
   \   00000074   F444               BRGE    ??Comp_CalSampProc_4
   \   00000076   9380....           STS     XAtYMax, R24
   \   0000007A   9390....           STS     (XAtYMax + 1), R25
   \   0000007E   9300....           STS     YMax, R16
   \   00000082   9310....           STS     (YMax + 1), R17
    284          	if(adc_y < YMin) { XAtYMin = adc_x;	YMin = adc_y; }
   \                     ??Comp_CalSampProc_4:
   \   00000086   9120....           LDS     R18, YMin
   \   0000008A   9130....           LDS     R19, (YMin + 1)
   \   0000008E   1702               CP      R16, R18
   \   00000090   0713               CPC     R17, R19
   \   00000092   F444               BRGE    ??Comp_CalSampProc_5
   \   00000094   9380....           STS     XAtYMin, R24
   \   00000098   9390....           STS     (XAtYMin + 1), R25
   \   0000009C   9300....           STS     YMin, R16
   \   000000A0   9310....           STS     (YMin + 1), R17
    285          }
   \                     ??Comp_CalSampProc_5:
   \   000000A4   E0E3               LDI     R30, 3
   \   000000A6   ....               RJMP    ?EPILOGUE_B3_L09
    286          
    287          /*
    288           *功能：
    289           *入口：
    290           *出口：
    291           *备注：
    292           *函数性质：
    293           */

   \                                 In  segment CODE, align 2, keep-with-next
    294          void Comp_CalPrmtCnt (void)
   \                     Comp_CalPrmtCnt:
    295          {	float	Phi0;
   \   00000000   ....               RCALL   ?PROLOGUE12_L09
   \   00000002                      REQUIRE ?Register_R4_is_cg_reg
   \   00000002                      REQUIRE ?Register_R5_is_cg_reg
   \   00000002                      REQUIRE ?Register_R6_is_cg_reg
   \   00000002                      REQUIRE ?Register_R7_is_cg_reg
   \   00000002                      REQUIRE ?Register_R8_is_cg_reg
   \   00000002                      REQUIRE ?Register_R9_is_cg_reg
   \   00000002                      REQUIRE ?Register_R10_is_cg_reg
   \   00000002                      REQUIRE ?Register_R11_is_cg_reg
    296          	float	Phi1;
    297          	float	Phi;
    298          	
    299          	
    300          	CompCalTag=0;
   \   00000002   E000               LDI     R16, 0
   \   00000004   9300....           STS     CompCalTag, R16
    301          	
    302          	XGain   = (XMax-XMin)>>1;
   \   00000008   9180....           LDS     R24, XMax
   \   0000000C   9190....           LDS     R25, (XMax + 1)
   \   00000010   9100....           LDS     R16, XMin
   \   00000014   9110....           LDS     R17, (XMin + 1)
   \   00000018   1B80               SUB     R24, R16
   \   0000001A   0B91               SBC     R25, R17
   \   0000001C   9595               ASR     R25
   \   0000001E   9587               ROR     R24
   \   00000020   ....               LDI     R26, LOW(SinPhi)
   \   00000022   ....               LDI     R27, (SinPhi) >> 8
   \   00000024   01FD               MOVW    R31:R30, R27:R26
   \   00000026   8780               STD     Z+8, R24
   \   00000028   8791               STD     Z+9, R25
    303          	YGain   = (YMax-YMin)>>1;
   \   0000002A   9100....           LDS     R16, YMax
   \   0000002E   9110....           LDS     R17, (YMax + 1)
   \   00000032   9120....           LDS     R18, YMin
   \   00000036   9130....           LDS     R19, (YMin + 1)
   \   0000003A   1B02               SUB     R16, R18
   \   0000003C   0B13               SBC     R17, R19
   \   0000003E   9515               ASR     R17
   \   00000040   9507               ROR     R16
   \   00000042   8702               STD     Z+10, R16
   \   00000044   8713               STD     Z+11, R17
    304          	XOffset = (XMax+XMin)>>1;
   \   00000046   9140....           LDS     R20, XMax
   \   0000004A   9150....           LDS     R21, (XMax + 1)
   \   0000004E   9100....           LDS     R16, XMin
   \   00000052   9110....           LDS     R17, (XMin + 1)
   \   00000056   0F40               ADD     R20, R16
   \   00000058   1F51               ADC     R21, R17
   \   0000005A   9555               ASR     R21
   \   0000005C   9547               ROR     R20
   \   0000005E   8744               STD     Z+12, R20
   \   00000060   8755               STD     Z+13, R21
    305          	YOffset = (YMax+YMin)>>1;
   \   00000062   9100....           LDS     R16, YMax
   \   00000066   9110....           LDS     R17, (YMax + 1)
   \   0000006A   9120....           LDS     R18, YMin
   \   0000006E   9130....           LDS     R19, (YMin + 1)
   \   00000072   0F02               ADD     R16, R18
   \   00000074   1F13               ADC     R17, R19
   \   00000076   9515               ASR     R17
   \   00000078   9507               ROR     R16
   \   0000007A   8706               STD     Z+14, R16
   \   0000007C   8717               STD     Z+15, R17
    306          	Phi0  = asin( ((float)XAtYMax-XOffset)/XGain );
   \   0000007E   9100....           LDS     R16, XAtYMax
   \   00000082   9110....           LDS     R17, (XAtYMax + 1)
   \   00000086   2F21               MOV     R18, R17
   \   00000088   0F22               LSL     R18
   \   0000008A   0B22               SBC     R18, R18
   \   0000008C   2F32               MOV     R19, R18
   \   0000008E   ....               RCALL   ?SL2F_L04
   \   00000090   0128               MOVW    R5:R4, R17:R16
   \   00000092   0139               MOVW    R7:R6, R19:R18
   \   00000094   018A               MOVW    R17:R16, R21:R20
   \   00000096   2F21               MOV     R18, R17
   \   00000098   0F22               LSL     R18
   \   0000009A   0B22               SBC     R18, R18
   \   0000009C   2F32               MOV     R19, R18
   \   0000009E   ....               RCALL   ?SL2F_L04
   \   000000A0   01A8               MOVW    R21:R20, R17:R16
   \   000000A2   01B9               MOVW    R23:R22, R19:R18
   \   000000A4   0182               MOVW    R17:R16, R5:R4
   \   000000A6   0193               MOVW    R19:R18, R7:R6
   \   000000A8   ....               RCALL   ?F_SUB_L04
   \   000000AA   0128               MOVW    R5:R4, R17:R16
   \   000000AC   0139               MOVW    R7:R6, R19:R18
   \   000000AE   018C               MOVW    R17:R16, R25:R24
   \   000000B0   2F21               MOV     R18, R17
   \   000000B2   0F22               LSL     R18
   \   000000B4   0B22               SBC     R18, R18
   \   000000B6   2F32               MOV     R19, R18
   \   000000B8   ....               RCALL   ?SL2F_L04
   \   000000BA   01A8               MOVW    R21:R20, R17:R16
   \   000000BC   01B9               MOVW    R23:R22, R19:R18
   \   000000BE   0182               MOVW    R17:R16, R5:R4
   \   000000C0   0193               MOVW    R19:R18, R7:R6
   \   000000C2   ....               RCALL   ?F_DIV_L04
   \   000000C4   ....               RCALL   asin
   \   000000C6   0128               MOVW    R5:R4, R17:R16
   \   000000C8   0139               MOVW    R7:R6, R19:R18
    307          	Phi1  = asin( ((float)XAtYMin-XOffset)/XGain );
    308          	Phi    = (Phi0-Phi1)/2.0f;
   \   000000CA   9100....           LDS     R16, XAtYMin
   \   000000CE   9110....           LDS     R17, (XAtYMin + 1)
   \   000000D2   2F21               MOV     R18, R17
   \   000000D4   0F22               LSL     R18
   \   000000D6   0B22               SBC     R18, R18
   \   000000D8   2F32               MOV     R19, R18
   \   000000DA   ....               RCALL   ?SL2F_L04
   \   000000DC   0148               MOVW    R9:R8, R17:R16
   \   000000DE   0159               MOVW    R11:R10, R19:R18
   \   000000E0   01FD               MOVW    R31:R30, R27:R26
   \   000000E2   8504               LDD     R16, Z+12
   \   000000E4   8515               LDD     R17, Z+13
   \   000000E6   2F21               MOV     R18, R17
   \   000000E8   0F22               LSL     R18
   \   000000EA   0B22               SBC     R18, R18
   \   000000EC   2F32               MOV     R19, R18
   \   000000EE   ....               RCALL   ?SL2F_L04
   \   000000F0   01A8               MOVW    R21:R20, R17:R16
   \   000000F2   01B9               MOVW    R23:R22, R19:R18
   \   000000F4   0184               MOVW    R17:R16, R9:R8
   \   000000F6   0195               MOVW    R19:R18, R11:R10
   \   000000F8   ....               RCALL   ?F_SUB_L04
   \   000000FA   0148               MOVW    R9:R8, R17:R16
   \   000000FC   0159               MOVW    R11:R10, R19:R18
   \   000000FE   01FD               MOVW    R31:R30, R27:R26
   \   00000100   8500               LDD     R16, Z+8
   \   00000102   8511               LDD     R17, Z+9
   \   00000104   2F21               MOV     R18, R17
   \   00000106   0F22               LSL     R18
   \   00000108   0B22               SBC     R18, R18
   \   0000010A   2F32               MOV     R19, R18
   \   0000010C   ....               RCALL   ?SL2F_L04
   \   0000010E   01A8               MOVW    R21:R20, R17:R16
   \   00000110   01B9               MOVW    R23:R22, R19:R18
   \   00000112   0184               MOVW    R17:R16, R9:R8
   \   00000114   0195               MOVW    R19:R18, R11:R10
   \   00000116   ....               RCALL   ?F_DIV_L04
   \   00000118   ....               RCALL   asin
   \   0000011A   01A8               MOVW    R21:R20, R17:R16
   \   0000011C   01B9               MOVW    R23:R22, R19:R18
   \   0000011E   0182               MOVW    R17:R16, R5:R4
   \   00000120   0193               MOVW    R19:R18, R7:R6
   \   00000122   ....               RCALL   ?F_SUB_L04
   \   00000124   E040               LDI     R20, 0
   \   00000126   E050               LDI     R21, 0
   \   00000128   E060               LDI     R22, 0
   \   0000012A   E37F               LDI     R23, 63
   \   0000012C   ....               RCALL   ?F_MUL_L04
   \   0000012E   0128               MOVW    R5:R4, R17:R16
   \   00000130   0139               MOVW    R7:R6, R19:R18
    309          	SinPhi = sin(Phi);
   \   00000132   ....               RCALL   sin
   \   00000134   930D               ST      X+, R16
   \   00000136   931D               ST      X+, R17
   \   00000138   932D               ST      X+, R18
   \   0000013A   933C               ST      X, R19
   \   0000013C   9713               SBIW    R27:R26, 3
    310          	OneOverCosPhi = 1.0f/cos(Phi);
   \   0000013E   0182               MOVW    R17:R16, R5:R4
   \   00000140   0193               MOVW    R19:R18, R7:R6
   \   00000142   ....               RCALL   cos
   \   00000144   01A8               MOVW    R21:R20, R17:R16
   \   00000146   01B9               MOVW    R23:R22, R19:R18
   \   00000148   E000               LDI     R16, 0
   \   0000014A   E010               LDI     R17, 0
   \   0000014C   E820               LDI     R18, 128
   \   0000014E   E33F               LDI     R19, 63
   \   00000150   ....               RCALL   ?F_DIV_L04
   \   00000152   01FD               MOVW    R31:R30, R27:R26
   \   00000154   8304               STD     Z+4, R16
   \   00000156   8315               STD     Z+5, R17
   \   00000158   8326               STD     Z+6, R18
   \   0000015A   8337               STD     Z+7, R19
    311          	
    312          }
   \   0000015C   E0EC               LDI     R30, 12
   \   0000015E   ....               RJMP    ?EPILOGUE_B12_L09

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     18      4   Comp_AdcCorrectS
     12      4   Comp_AngCntProc
       12      2   -> Comp_AdcCorrectS
       12      2   -> Comp_GetAdc
       12      2   -> atan
      0      2   Comp_CalInit
     12      4   Comp_CalPrmtCnt
       12      2   -> asin
       12      2   -> cos
       12      2   -> sin
      3      2   Comp_CalSampProc
        3      2   -> Comp_GetAdc
        3      2   -> Comp_MidFilter
      2      2   Comp_GetAdc
        2      2   -> Comp_SpiBusyTest
        2      2   -> Comp_SpiByteGet
        2      2   -> Comp_SpiByteSend
        2      2   -> Comp_SpiEnd
        2      2   -> Comp_SpiSta
      0      2   Comp_HardwareInit
      0      2   Comp_MidFilter
      0      2   Comp_SpiBusyTest
      0      2   Comp_SpiByteGet
      0      2   Comp_SpiByteSend
      0      2   Comp_SpiEnd
      0      2   Comp_SpiSta


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     222  Comp_AdcCorrectS
     306  Comp_AngCntProc
      46  Comp_CalInit
     352  Comp_CalPrmtCnt
     168  Comp_CalSampProc
      28  Comp_GetAdc
      22  Comp_HardwareInit
      70  Comp_MidFilter
       8  Comp_SpiBusyTest
      36  Comp_SpiByteGet
      28  Comp_SpiByteSend
       4  Comp_SpiEnd
      12  Comp_SpiSta
      16  SinPhi
          OneOverCosPhi
          XGain
          YGain
          XOffset
          YOffset
      12  XAdcCalBuf
          YAdcCalBuf
       1  _A_DDRB
       1  _A_PINB
       1  _A_PORTB
       6  -- Other

 
     3 bytes in segment ABSOLUTE
 1 302 bytes in segment CODE
     6 bytes in segment INITTAB
    28 bytes in segment NEAR_Z
 
 1 302 bytes of CODE memory (+ 6 bytes shared)
    28 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
